_ _ _ _ _ _ _ _ _ _

На хосте
В Beremiz
_ _ _ _ _ _ _ _ _ _

Создаем:
-Расширение С (C_Extension)
-FunctionalBlock (на языке ST с именем C_Pragma)
-Program (на языке FBD с именем plc_prg)
-Resource (с именем resource1)

Дерево проекта:
-FirstProject
--C_Pragma
--plc_prg
--resource1
--0.x: c_ext_0

>Содержимое FirstProject
Во вкладке Config:

PYRO://192.168.137.233:3000
Compiler: arm-linux-gnueabihf-gcc
CFLAGS:
Linker: arm-linux-gnueabihf-gcc
LDFlAGS: -lwiringPi

>Содержимое C_Pragma
Добавляем 2 локальные переменные IN и OUT типа Input, 1 переменную VALUE типа Output (используется для отладки)

{{
    extern int ReadPin(int);
    extern void WritePin(int, int);
    extern void InitPin(int, int);
    extern void CheckPin();

    CheckPin();
    InitPin(GetFbVar(IN), 0);
    InitPin(GetFbVar(OUT), 1);

    SetFbVar(VALUE, GetFbVar(OUT));                 //удалить после отладки
    WritePin(GetFbVar(OUT), ReadPin(GetFbVar(IN)));
}}

>Содержимое plc_prg
Добавляем в программу переменную типа C_Pragma (пользовательский блок)
Создаем 2 переменные типа Input с именами Input (для указания входного пина) и Output (для указания выходного пина):

                            C_Pragma0
                          ______________
 ______                  |   C_Pragma   |
|Output| - ------------ -| OUT          |
|______|                 |              |
 ______                  |        VALUE | -
|Input | - ------------ -| IN           |
|______|                 |______________|

>Содержимое resource1
Создаем задачу, создаем экземпляр:

Tasks:
|Name       |Triggering       |Single       |Interval       |Priority
|GetTimeSync|Cyclic           |             |T#1ms          |0

Instances:
|Name                         |Type         |Task
|plc_task_instance            |plc_prg      |GetTimeSync

>Содержимое 0.x: c_ext_0
Во вкладке Config: LDFlAGS: -lwiringPi
Во вкладке C code:
_______________________________________________________________________________
/////////////////////////////// includes section ///////////////////////////////
#include <stdlib.h>
#include <wiringPi.h>
/////////////////////////////// globals section ////////////////////////////////
void InitPin(int pin, int val)
{
    pinMode(pin, val);
}
void CheckPin()
{
    if (wiringPiSetup() == -1) exit(1);
}
int ReadPin(int pin)
{
    return digitalRead(pin);
}
void WritePin(int pin, int val)
{
    digitalWrite(pin, val);
}
///////////////////////////// initFunction section /////////////////////////////
/////////////////////////// cleanUpFunction section ////////////////////////////
/////////////////////////// retrieveFunction section ///////////////////////////
/////////////////////////// publishFunction section ////////////////////////////
_______________________________________________________________________________

_ _ _ _ _ _ _ _ _ _

На таргете
В terminal
_ _ _ _ _ _ _ _ _ _
$python Beremiz_service.py -x 0

*Для отладки запускать Beremiz.py и Beremiz_service.py на хосте
Project/Config:

PYRO://127.0.0.1:3000 или LOCAL://
Compiler: gcc
CFLAGS:
Linker: gcc
LDFlAGS:

$python Beremiz_service.py

_______________________________________________________________________________

Troubleshooting
_______________________________________________________________________________

!Компиляция проекта не выполняется, ошибка в строке с #include <wiringPi.h> :
!!Данный метод устранит ошибку, но при диплое может возникнуть ошибка, описанная ниже
Собрать библиотеку libwiringPi через ./build
Добавить строку /usr/local/lib в файл /etc/ld.so.conf
Выполнить sudo ldconfig
Скопировать /WiringPi/wiringPi.h в /usr/include

!Компиляция проекта выполняется, при диплое ошибка Undefined symbol $func_name :
Собрать библиотеку libwiringPi.so на таргете и перенести ее на хост (в папку /usr/lib/gcc-cross/arm-linux-gnueabihf/7 или /usr/lib или /usr/local/lib):
Вариант 1: через ./build в папке WiringPi
Вариант 2: вручную через gcc (без флага -fPIC) и создать символьную ссылку (ln -sf)
Скопировать wiringPi.h в /usr/include или /usr/arm-linux-gnueabihf/include

!Компиляция проекта выполняется, при диплое ошибка ELFCLASS64 :
Используется неверный компилятор на хосте

!Поведение блоков отличается от ожидаемого :
Некоторые блоки критичны к названиям, например:
CounterST - работает
Counter   - не работает
